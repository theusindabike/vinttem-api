services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: bash -c "cd ./app && python manage.py collectstatic --no-input --clear && gunicorn vintem_api.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/static_files
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
  nginx-proxy:
    container_name: nginx-proxy
    build: nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - static_volume:/app/static_files
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen=true
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
    environment:
      - DEBUG=true
    depends_on:
      - web
  nginx-proxy-letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    env_file:
      - ./.env.prod.proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    # environment:
    #   - NGINX_DOCKER_GEN_CONTAINER=nginx-gen
    depends_on:
      - nginx-proxy

volumes:
  postgres_data:
  static_volume:
  certs:
  html:
  vhost:
  acme: